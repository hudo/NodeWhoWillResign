{"changed":false,"filter":false,"title":"spider-async-using-queue.js","tooltip":"/learning/spider/spider-async-using-queue.js","value":"var request = require('request');\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar utilities = require('./utilities');\nvar TaskQueue = require('./taskQueue');\nvar downloadQueue = new TaskQueue(2);\n\nfunction spiderLinks(currentUrl, body, nesting, callback) {\n    if (nesting === 0) {\n        return process.nextTick(callback);\n    }\n    var links = utilities.getPageLinks(currentUrl, body);\n    if (links.length === 0) {\n        return process.nextTick(callback);\n    }\n\n    var completed = 0;\n    var errored = false;\n\n    links.forEach(function(link) {\n        downloadQueue.pushTask(function(done) {\n            spider(link, nesting - 1, function(err) {\n                if (err) {\n                    errored = true;\n                    return callback(err);\n                }\n                if (++completed === links.length && !errored)\n                    callback();\n                done();\n            });\n        });\n    });\n\n    function iterate(index) {\n        if (index === links.length) {\n            return callback();\n        }\n\n        spider(links[index], nesting - 1, function(err) {\n            if (err) {\n                return callback(err);\n            }\n            iterate(index + 1);\n        });\n    }\n    iterate(0);\n}\n\nfunction saveFile(filename, contents, callback) {\n    mkdirp(path.dirname(filename), function(err) {\n        if (err) {\n            return callback(err);\n        }\n        fs.writeFile(filename, contents, callback);\n    });\n}\n\nfunction download(url, filename, callback) {\n    console.log('Downloading ' + url);\n    request(url, function(err, response, body) {\n        if (err) {\n            return callback(err);\n        }\n        saveFile(filename, body, function(err) {\n            console.log('Downloaded and saved: ' + url);\n            if (err) {\n                return callback(err);\n            }\n            callback(null, body);\n        });\n    });\n}\n\nvar spidering = {};\n\nfunction spider(url, nesting, callback) {\n    if (spidering[url]) return process.nextTick(callback);\n    spidering[url] = true;\n    var filename = utilities.urlToFilename(url);\n    fs.readFile(filename, 'utf8', function(err, body) {\n        if (err) {\n            if (err.code !== 'ENOENT') {\n                return callback(err);\n            }\n\n            return download(url, filename, function(err, body) {\n                if (err) {\n                    return callback(err);\n                }\n                spiderLinks(url, body, nesting, callback);\n            });\n        }\n\n        spiderLinks(url, body, nesting, callback);\n    });\n}\n\n\nspider(process.argv[2], process.argv[3], function(err, filename) {\n    if (err) {\n        console.log(err);\n    }\n    else {\n        console.log('Download complete');\n    }\n});\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":29,"column":23},"end":{"row":29,"column":23},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1427209242781}